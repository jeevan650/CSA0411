#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5  // Number of philosophers

pthread_mutex_t forks[N];

void* philosopher(void* num) {
    int id = *(int*)num;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        // Pick up forks (mutex)
        pthread_mutex_lock(&forks[id]);
        pthread_mutex_lock(&forks[(id + 1) % N]);

        printf("Philosopher %d is eating.\n", id);
        sleep(1);

        // Put down forks
        pthread_mutex_unlock(&forks[id]);
        pthread_mutex_unlock(&forks[(id + 1) % N]);
    }
    return NULL;
}

int main() {
    pthread_t thread_id[N];
    int ids[N];
    int i;

    for (i = 0; i < N; i++)
        pthread_mutex_init(&forks[i], NULL);

    for (i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&thread_id[i], NULL, philosopher, &ids[i]);
    }

    for (i = 0; i < N; i++)
        pthread_join(thread_id[i], NULL);

    for (i = 0; i < N; i++)
        pthread_mutex_destroy(&forks[i]);

    return 0;
}
